웹 애플리케이션 모델
- 애플리케이션 개발시 일반적으로 많이 사용하는 표준화된 소스구조
- 모델의 종류 모델1과 모델2가 있다.

모델1 방식
- 데이터베이스 연동 같은 비즈니스 로직 작업과 그 작업결과를 나타
내주는 작업을 동일한 JSP 페이지에서 수행한다.
- 모든 클라이언트의 요청과 비즈니스 로직 처리를 JSP가 담당하는 
구조이다.
- 기능 구현이 쉽고 편리하지만 유지 보수가 어렵다.

모델2 방식
- 웹 애플리케이션의 각 기능(클라이언트의 요청처리, 응답처리, 비
즈니스 로직 처리)을 분리해서 구현한다.
- 객체 지향 프로그래밍에서 각각의 기능을 모듈화해서 개발하자는 원
리이다.

모델2 방식 특징
- 각 기능이 서로 분리되어 있어 개발 및 유지 보수가 쉽다.
- 각 기능(모듈)의 재사용성이 높다.
- 디자이너와 개발자의 작업을 분업화해서 쉽게 개발할 수 있다.
- 모델2 방식과 관련된 기능이나 개념의 학습이 필요하다.


MVC란
- Model, View, Controller
- 일반 PC 프로그램 개발에 사용되는 디자인 패턴을 웹 애플리케이션에 도입한 것.
- 웹 애플리케이션을 화면, 요청처리, 로직처리 부분으로 나누어 개발하는 방법


MVC 특징
- 각 기능이 분리되어 있어 개발 및 유지 보수가 편리하다.
- 각 기능의 재사용성이 높아진다.
- 디자이너와 개발자의 작업을 분업화해서 빠르고 쉽게 개발할 수 있다.

MVC 구성요소
- Model : 비즈니스 로직 처리(DB)
- View : 사용자에게 보여줄 화면을 담당
- Controller : 사용자의 요청 및 흐름 제어를 담당

- Model 	 : DAO, VO
  View  	 : JSP
  Controller : Servlet
  (모델1은 JSP가 View,Controller 둘 다함)
 
Controller
- 서블릿이 컨트롤러의 역할
- 클라이언트의 요청을 분석
- 요청에 대해서 필요한 모델을 호출
- Model에서 처리한 결과를 보여주기 위해서 JSP 페이지를 선택

Model
- 데이터베이스 연동과  같은 비즈니스 로직을 수행
- 일반적으로 DAO와 VO 클래스로 이루어짐

View
- JSP가 화면 기능 담당
- Model에서 처리한 결과를 화면에 표시

커맨드(Command) 패턴
- 브라우저가 URL 패턴을 이용해 컨트롤러에게 수행 작업을 요청하
는 방법이다.
- 컨트롤러는 HttpServletRequest의 getPathInfo() 메
서드를 이용해 URL 패턴에서 요청명을 받아와 작업을 수행한다.

요청하는 형식
http://localhost:8080/pro13/member/listMembers.do
- /member : 회원 기능을 의미
- /listMembers.do : 회원 정보 조회 기능을 의미














